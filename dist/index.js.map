{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isOrder = require( '@stdlib/ndarray-base-assert-is-order' );\nvar strides = require( '@stdlib/ndarray-strides' );\nvar ndims = require( '@stdlib/ndarray-ndims' );\nvar strides2order = require( '@stdlib/ndarray-base-strides2order' );\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar ROW_MAJOR = 'row-major';\nvar COLUMN_MAJOR = 'column-major';\n\n\n// MAIN //\n\n/**\n* Returns the layout order of a provided ndarray.\n*\n* @param {ndarrayLike} x - input ndarray\n* @throws {TypeError} must provide an ndarray\n* @returns {(string|null)} layout order\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-zeros' );\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'order': 'row-major'\n* });\n*\n* var out = order( x );\n* // returns 'row-major'\n*/\nfunction order( x ) {\n\tvar st;\n\tvar o;\n\n\t// Note: we intentionally avoid rigorous ndarray checks to minimize performance impacts. This obviously means that non-ndarray-like objects can sneak through, but this is likely all right for the purposes of this function...\n\tif ( typeof x !== 'object' || x === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an ndarray. Value: `%s`.', x ) );\n\t}\n\to = x.order;\n\tif ( isOrder( o ) ) {\n\t\treturn o;\n\t}\n\t// Try to infer the layout order from the strides array...\n\tst = strides( x );\n\to = strides2order( st );\n\tif ( o === 1 || o === 3 ) {\n\t\treturn ROW_MAJOR; // for o == 3 (both row- and column-major; e.g., one-dimensional ndarrays), default to row-major\n\t}\n\tif ( o === 2 ) {\n\t\treturn COLUMN_MAJOR;\n\t}\n\t// o === 0\n\tif ( ndims( x ) === 0 ) {\n\t\treturn ROW_MAJOR; // default to row-major for zero-dimensional ndarrays\n\t}\n\t// Case: mixed strides (e.g., [ 2, 3, 1 ] )\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = order;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Return the layout order of a provided ndarray.\n*\n* @module @stdlib/ndarray-order\n*\n* @example\n* var zeros = require( '@stdlib/ndarray-zeros' );\n* var order = require( '@stdlib/ndarray-order' );\n*\n* var x = zeros( [ 3, 3, 3 ], {\n*     'order': 'row-major'\n* });\n*\n* var out = order( x );\n* // returns 'row-major'\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAU,QAAS,sCAAuC,EAC1DC,EAAU,QAAS,yBAA0B,EAC7CC,EAAQ,QAAS,uBAAwB,EACzCC,EAAgB,QAAS,oCAAqC,EAC9DC,EAAS,QAAS,uBAAwB,EAK1CC,EAAY,YACZC,EAAe,eAsBnB,SAASC,EAAOC,EAAI,CACnB,IAAIC,EACAC,EAGJ,GAAK,OAAOF,GAAM,UAAYA,IAAM,KACnC,MAAM,IAAI,UAAWJ,EAAQ,0DAA2DI,CAAE,CAAE,EAG7F,OADAE,EAAIF,EAAE,MACDR,EAASU,CAAE,EACRA,GAGRD,EAAKR,EAASO,CAAE,EAChBE,EAAIP,EAAeM,CAAG,EACjBC,IAAM,GAAKA,IAAM,EACdL,EAEHK,IAAM,EACHJ,EAGHJ,EAAOM,CAAE,IAAM,EACZH,EAGD,KACR,CAKAN,EAAO,QAAUQ,IC/CjB,IAAII,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isOrder", "strides", "ndims", "strides2order", "format", "ROW_MAJOR", "COLUMN_MAJOR", "order", "x", "st", "o", "main"]
}
